% \VignetteIndexEntry{GRANBase overview}
% \VignetteDepends{}
% \VignetteKeywords{reprise}
% \VignettePackage{GRANBase}
\documentclass[10pt]{article}

\title{The GRAN repository system and reproducibility tools}
\author{Gabriel Becker}
\date{\today}




\newcommand{\gran}{{\tt GRAN }}

\begin{document}
\SweaveOpts{concordance=TRUE}

\maketitle
\tableofcontents
\newpage

\section{Introduction}

\gran is an open source set of tools for distributing and testing \R{} packages for 
both general deployment and result reproduction. It is centered around the R repository
mechanism for pacakge distribution. \gran provides three major areas of functionality:
\begin{enumerate}
  \item{The ability to create one or more \R{} repositories by pulling and testing packages 
    from diverse locations (scm, local directory), in a manner conducive to continuous integration}
  \item{Tools for recreating specific evironments based on sessionInfos, and for creating lightweight 
    virtual repositories which serve the exact package versions specified in the sessoinInfo}
  \item{Tools for assessing the potential impact of upgrading a package, to assist adminstrators in
    keeping systems up-to-date while protecting reproducibilty and comparability of results in
    long-running core applications.}
\end{enumerate}

\section{Creating GRAN repositories}

\gran repositories are based on \textit{package manifests} which are tabular data files contain the information
necessary for \gran to locate, test, build, and deploy a repository. The manifest file contains a combination of information necessary to retrieve the most recent source for the package (including url, scm type, branch, etc) and information about the most recent attempted and successful builds of that package within the \gran system.

The full manifest file should have the following columns:

<<eval=TRUE,echo=FALSE>>=
library(GRANBase)

names(GRANBase:::emptyManifest)
@ 

The \Rfunction{makeManifestRow} convenience function is provided to assist in the programmatic construction of a GRAN manifest.

Given a \gran manifest, initial construction and rebuilding of individual \gran repositories (referred to as \textit{subrepositories} because \gran supports a form of branched deployment) is performed via the \Rfunction{makeSingleGRANRepo} function. For example:

<<eval=TRUE>>=
man = makeManifestRow(name="toypkg", url = system.file("toypkg", package = currentPackage()),
    type = "local", subrepo = "stable", subdir=".")
repdir = file.path(tempdir(), "repos")
dir.create(repdir)
repo = makeSingleGRANRepo(man, subRepoName = "stable", baseDir = repdir,
    dest_base = repdir, dest_url = paste0("file://", normalizePath(repdir)))
@ 
<<eval=TRUE>>=
available.packages(contrib.url(repo_url(repo), type="source"), type="source")
@ 
We refer readers to the documetnation for that function regarding the customization options.

\gran represents (sub)repositories as \Rclass{GRANRepository} objects. These objects contain all the information required to build and deploy the repository.

Once a \gran repository is created, its \Rclass{GRANRepository} object and manifest are saved within the created directory structure as the files {\tt repo.rda} and {\tt manifest.dat}, respectively. This allows future builds to be invoked by the simpler syntax of passing a \Rclass{GRANRepository} object or path to a created repository to \Rfunction{makeSingleGRANRepo} directly:

<<eval=TRUE>>=
repo = makeSingleGRANRepo(repo=file.path(repdir, "stable"))
@ 

The \Rfunction{makeSingleGRANRepo} function also accepts a {\tt buildOnly} argument, which will cause only the specified packages (and their reverse dependencies) to be rebuilt, regardless of changes in version number.
\newpage
\section{The repository build process}

\gran performs the following steps when creating or updating a repository. At the end of each step, the packages' statuses are updated to reflect the results of that step.

\begin{enumerate}
  \item{Up-to-date copies of package sources are obtained for each package being built, including updating previously checked out versions}
  \item{Packages whose versions have changed since their last successful build, or who are reverse dendencies of such a package I are built without vignettes into a temporary repository via {\tt R CMD build}. }
  \item{Packages which successfully built, along with their \gran, {\tt CRAN}, and \Bioconductor{}-based dependencies, are installed into a temporary library location. }
  \item{Packages which successfully installed are built again, with vignettes, into a staging directory.}
  \item{Remaining packages are tested via {\tt R CMD CHECK}, and their statuses are updated accordingly}
  \item{Packages which meet the requirements set for the repository ({\tt CHECK} warnings and notes can be all owed, or not) are deployed into the final destination repository}
  \item{The \gran manifest is updated to reflect the build results}
  \item{An HTML build report is generated from the updated manifest}
  \item{The manifest and \Rclass{GRANRepository} object are saved}
  \item{The \Rclass{GRANRepsitory} object is returned}
\end{enumerate}

\section{Tools for reproducibility}

\gran provides user and repository level tools to facilitate both the recreation of historical results and the future-proofing of current results. These facilities are based on \R{}'s \Rfunction{sessionInfo} mechanism.

\gran{}'s reproducibility tools are centered around the construction and use of \textit{virtual repositories} which offer specific versions of certain packages, without requiring major new deployments beyond a standard \gran repository.

The primary use-case of this is to offer repositories which serve the  exact versions of the packages dictated by a \Rclass{sessionInfo} (or the text generated when printing one), \textit{even if the specified versions are not currently offered via the CRAN or \Bioconductor repositories}.

Given an installation of the correct version of \R{}, then, we can easily generate an environment appropriate for reproducing past results, even those from years ago.

The \Rfunction{sessionRepo} function creates a virtual repository which allows visitors to install the exact packages necessary to recreate a given session info. It gives the option to immediately install the set of packages, and does not require an existing \gran repository (so long as it is able to find all the requested packages in CRAN and \Bioconductor). The {\tt install} parameter indicates whether the repository should be used to immediately install the packages locally.

We use a toy sessionInfo example, because while function, some aspects of the package search process are too expensive to be run in a vignette, particularly for old Bioconductor packages.

<<echo=FALSE,eval=TRUE>>=
if(getOption("repos") == "@CRAN@") {
    options(repos = c("CRAN" = "http://cran.rstudio.com"))
    need_reset = TRUE
}
@ 
<<eval=TRUE>>=
load(system.file("session.rda", package= currentPackage()))
session
@ 
To get a library with just the desired packages in it, then, we would do:

<<eval=TRUE>>=
loc = file.path(".", "mySessionLibloc")
dir.create(loc)
sessionRepo(session, repo_dir = tempdir(), name = "mySessionRepo", install=TRUE,
            GRepo = repo, libloc = loc,
            stoponfail=FALSE, replace = TRUE)
@ 


We can confirm that our packages were collected and installed correct:

<<eval=TRUE>>=
installed.packages(lib.loc = loc)[,c("Package", "LibPath", "Version")]
@ 
Package versions are located and downloaded via the \Rfunction{getSessionPackages} function, which performs the following steps to attempt to locate and retrieve the correct package versions.

\begin{enumerate}
  \item{If given a \Rclass{GRANRepository} object:
    \begin{enumerate}
      \item{Look in all appropriate directories associated with that repository for a built copy of that version of the package}
      \item{Look in the SCM checkouts associated with the \gran repository. If a checkout for the package is found, identify the last commit for that version and build the package from that revision}
    \end{enumerate}
  }
  \item{Look in the current CRAN repository}
  \item{Look in the CRAN source package archives}
  \item{Look in the current \Bioconductor repository}
  \item{Look in the \Bioconductor SVN repository, if present:
    \begin{enumerate}
      \item{Use git svn to checkout full SVN repository for the package *this is expensive but only happens once*}
      \item{Parse the full diff log for the DESCRIPTION file to identify the last commit for the desired exact version}
      \item{Build the package from source within that commit}
    \end{enumerate}
  }
\end{enumerate}


We note that while scanning SCM repositories for the exact version is effective, it can be quite expensive in terms of bandwidth, disk space, and computation time, particularly for SVN repositories including \Bioconductor.

When built on top of a \gran repository, multiple virtual repositories are able to share built packages. \gran repositories do not delete previous versions when a new version of the package is deployed. Furthermore, when specific package versions are found when constructing virtual repositories, they are stored in a communal \textit{notrack} directory and served via symlinks. This allows us to ``host'' a unique repository for each sessionInfo we wish our users to be able to reproduce, without having a combinatorial explosion of disk-space requirements.

We also export the \Rfunction{locatePkgVersion} function which does the work of actually doing the searching and downloading. This can be called directly if desired:


<<eval=TRUE>>=
locatePkgVersion("devtools", "1.4.1", repo = NULL, dir = tempdir())
@ 

<<echo=FALSE,eval=TRUE>>=
if(need_reset)
    options(repos=c(CRAN="@CRAN@"))
@ 

\section{Tools for managing repository stability}

\gran also provides tools to navigate the tension between stability and using the most up-to-date version of packages to have the latest bug fixes available.


The \Rfunction{identifyRisk} function identifies which currently installed packages can be updated, and determines the packages that could possibly be affected by updating the package. In particular, the function allows the user to identify a vector of \textit{important} packages and assesses the risks to each of them (by default, it takes that to be the full set of installed packages).


Risk here has a dual meaning. On the one hand updating a package which an important package depends on incurs the risk of changing the important package's behavior, potentially changing results in a critical application. On the other hand, not updating a such a package may leave important bugfixes un-applied, drawing the results generated when using the important package into question.


\Rfunction{buildRiskReport} builds an HTML report which lists information about each package with an update available in an easy to digest table. It also provides a list of specific risks to each important package (packages with no risks identified are currently omitted).

\begin{figure}[p]
    \centering
    \includegraphics[width=0.8\textwidth]{ReportScreenshot.png}
    \caption{An update risk report}
    \label{fig:risk_report}
\end{figure}
 


\end{document}
